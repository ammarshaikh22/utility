<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

/**
 * App\Models\InvoiceItems
 *
 * Eloquent model representing individual items inside an invoice.
 *
 * @property int $id                         // Primary key
 * @property int $invoice_id                 // Foreign key to invoices table
 * @property int|null $quickbooks_item_id    // QuickBooks sync reference (nullable)
 * @property string $item_name               // Name of the item/service
 * @property string|null $item_summary       // Short summary/description
 * @property string $type                    // Item type (e.g., product/service)
 * @property float $quantity                 // Quantity of items
 * @property float $unit_price               // Price per unit
 * @property float $amount                   // Total amount (quantity Ã— unit_price)
 * @property string|null $taxes              // JSON encoded list of applied taxes
 * @property \Illuminate\Support\Carbon|null $created_at  // Created timestamp
 * @property \Illuminate\Support\Carbon|null $updated_at  // Updated timestamp
 * @property string|null $hsn_sac_code       // HSN/SAC code (for tax purposes)
 * @property-read mixed $icon                // Icon (if handled by traits or UI)
 * @property-read \App\Models\InvoiceItemImage|null $invoiceItemImage // Associated item image
 * @property-read mixed $tax_list            // Human-readable list of taxes
 * @property int|null $product_id            // Optional product reference
 * @property int|null $unit_id               // Unit type reference
 * @property-read \App\Models\UnitType|null $unit // Related unit type model
 * @property-read \App\Models\Invoice $invoice    // Parent invoice
 *
 * Eloquent query builder methods auto-generated by Laravel
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems query()
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereHsnSacCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereInvoiceId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereItemName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereItemSummary($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereQuantity($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereTaxes($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereUnitPrice($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereProductId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|InvoiceItems whereUnitId($value)
 * @mixin \Eloquent
 */
class InvoiceItems extends BaseModel
{
    // Prevents mass-assignment of "id"
    protected $guarded = ['id'];

    // Eager load related invoiceItemImage by default
    protected $with = ['invoiceItemImage'];

    /**
     * Static method: Get tax model by its ID (including soft-deleted/trashed ones).
     *
     * @param int $id
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public static function taxbyid($id)
    {
        return Tax::where('id', $id)->withTrashed();
    }

    /**
     * Relationship: One invoice item has one associated image.
     *
     * @return HasOne
     */
    public function invoiceItemImage(): HasOne
    {
        return $this->hasOne(InvoiceItemImage::class, 'invoice_item_id');
    }

    /**
     * Relationship: Invoice item belongs to a unit type.
     *
     * @return BelongsTo
     */
    public function unit(): BelongsTo
    {
        return $this->belongsTo(UnitType::class, 'unit_id');
    }

    /**
     * Accessor: Returns a formatted tax list as a string.
     * Example: "GST: 18%, Service Tax: 5%"
     *
     * @return string
     */
    public function getTaxListAttribute()
    {
        $invoiceItem = $this;
        $taxes = '';

        if ($invoiceItem && $invoiceItem->taxes) {
            $numItems = count(json_decode($invoiceItem->taxes));

            if (!is_null($invoiceItem->taxes)) {
                foreach (json_decode($invoiceItem->taxes) as $index => $tax) {
                    $tax = $this->taxbyid($tax)->first();
                    $taxes .= $tax->tax_name . ': ' . $tax->rate_percent . '%';

                    // Add comma if not the last element
                    $taxes = ($index + 1 != $numItems) ? $taxes . ', ' : $taxes;
                }
            }
        }

        return $taxes;
    }

    /**
     * Relationship: Invoice item belongs to a parent invoice.
     *
     * @return BelongsTo
     */
    public function invoice(): BelongsTo
    {
        return $this->belongsTo(Invoice::class, 'invoice_id');
    }
}
